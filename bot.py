import logging
import os
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from api_client import AnimeAPIClient
from config import TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
if not os.path.exists('logs'):
    os.makedirs('logs')

class DialogLogger:
    @staticmethod
    def log(user_id: int, message: str, is_bot: bool = False):
        log_file = f'logs/user_{user_id}.log'
        prefix = 'BOT' if is_bot else 'USER'
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(f'{timestamp} {prefix}: {message}\n')

def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ"), KeyboardButton("–¢–æ–ø –∞–Ω–∏–º–µ")],
        [KeyboardButton("–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ"), KeyboardButton("–ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:"
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=welcome_text,
        reply_markup=get_main_keyboard()
    )
    
    DialogLogger.log(user.id, "/start")
    DialogLogger.log(user.id, welcome_text, is_bot=True)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üîç –ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ - –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "üèÜ –¢–æ–ø –∞–Ω–∏–º–µ - –ø–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ –∞–Ω–∏–º–µ\n"
        "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=help_text,
        reply_markup=get_main_keyboard()
    )
    
    DialogLogger.log(update.effective_user.id, "/help")
    DialogLogger.log(update.effective_user.id, help_text, is_bot=True)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    DialogLogger.log(user_id, text)
    
    if text == "–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ":
        await search_anime(update, context)
    elif text == "–¢–æ–ø –∞–Ω–∏–º–µ":
        await top_anime(update, context)
    elif text == "–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ":
        await random_anime(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "–ù–∞–∑–∞–¥":
        await help_command(update, context)
    else:
        await handle_search_query(update, context)

async def search_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    DialogLogger.log(update.effective_user.id, "–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ")

async def handle_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.message.text
    
    if query == "–ù–∞–∑–∞–¥":
        await help_command(update, context)
        return
    
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        anime_list = AnimeAPIClient.search_anime(query)
        
        if not anime_list:
            response = "‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            await update.message.reply_text(response, reply_markup=get_main_keyboard())
            DialogLogger.log(user_id, response, is_bot=True)
            return
        
        keyboard = []
        for anime in anime_list[:5]:
            title = anime['title'][:30] + "..." if len(anime['title']) > 30 else anime['title']
            keyboard.append([InlineKeyboardButton(
                f"{title} ({anime.get('year', 'N/A')})",
                callback_data=f"details_{anime['mal_id']}"
            )])
        
        await update.message.reply_text(
            "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        DialogLogger.log(user_id, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", is_bot=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        response = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await update.message.reply_text(response, reply_markup=get_main_keyboard())
        DialogLogger.log(user_id, response, is_bot=True)

async def show_anime_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    try:
        anime_id = query.data.split("_")[1]
        anime = AnimeAPIClient.get_anime_details(anime_id)
        
        if not anime:
            response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ."
            await query.edit_message_text(response)
            DialogLogger.log(user_id, response, is_bot=True)
            return
        
        title = anime['title']
        synopsis = anime.get('synopsis', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        score = anime.get('score', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
        episodes = anime.get('episodes', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        year = anime.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        response = (
            f"üé¨ <b>{title}</b> ({year})\n\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {score}\n"
            f"üì∫ –≠–ø–∏–∑–æ–¥–æ–≤: {episodes}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{synopsis[:400]}..."
        )
        
        await query.edit_message_text(
            text=response,
            parse_mode='HTML'
        )
        DialogLogger.log(user_id, response, is_bot=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")
        response = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        await query.edit_message_text(response)
        DialogLogger.log(user_id, response, is_bot=True)

async def top_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    DialogLogger.log(user_id, "–¢–æ–ø –∞–Ω–∏–º–µ")
    
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        anime_list = AnimeAPIClient.get_top_anime()[:10]
        
        if not anime_list:
            response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∞–Ω–∏–º–µ."
            await update.message.reply_text(response, reply_markup=get_main_keyboard())
            DialogLogger.log(user_id, response, is_bot=True)
            return
        
        response = "üèÜ –¢–æ–ø –∞–Ω–∏–º–µ:\n\n" + "\n".join(
            f"{i+1}. {anime['title']} ‚≠ê {anime.get('score', 'N/A')}" 
            for i, anime in enumerate(anime_list)
        )
        
        await update.message.reply_text(
            text=response,
            reply_markup=get_main_keyboard()
        )
        DialogLogger.log(user_id, response, is_bot=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–æ–ø–∞: {e}")
        response = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –∞–Ω–∏–º–µ."
        await update.message.reply_text(response, reply_markup=get_main_keyboard())
        DialogLogger.log(user_id, response, is_bot=True)

async def random_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    DialogLogger.log(user_id, "–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ")
    
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        anime = AnimeAPIClient.get_random_anime()
        
        if not anime:
            response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ."
            await update.message.reply_text(response, reply_markup=get_main_keyboard())
            DialogLogger.log(user_id, response, is_bot=True)
            return
        
        title = anime['title']
        synopsis = anime.get('synopsis', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        score = anime.get('score', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
        episodes = anime.get('episodes', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        year = anime.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        response = (
            f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ:\n\n"
            f"üé¨ <b>{title}</b> ({year})\n\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {score}\n"
            f"üì∫ –≠–ø–∏–∑–æ–¥–æ–≤: {episodes}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{synopsis[:400]}..."
        )
        
        await update.message.reply_text(
            text=response,
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        DialogLogger.log(user_id, response, is_bot=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–∏–º–µ: {e}")
        response = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–∏–º–µ."
        await update.message.reply_text(response, reply_markup=get_main_keyboard())
        DialogLogger.log(user_id, response, is_bot=True)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫)
    app.add_handler(CallbackQueryHandler(show_anime_details, pattern="^details_"))
    
    app.run_polling()

if __name__ == "__main__":
    main()